/**
 * UserTag automatically generated by SDKgen please do not edit this file manually
 * {@link https://sdkgen.app}
 */

import {TagAbstract, HttpRequest} from "sdkgen-client"
import {ClientException, UnknownStatusCodeException} from "sdkgen-client";

import {Error} from "./Error";
import {ErrorException} from "./ErrorException";
import {User} from "./User";

export class UserTag extends TagAbstract {
    /**
     * Returns the user object of the requester's account. For OAuth2, this requires the identify scope, which will return the object without an email, and optionally the email scope, which returns the object with an email.
     *
     * @returns {Promise<User>}
     * @throws {ErrorException}
     * @throws {ClientException}
     */
    public async getCurrent(): Promise<User> {
        const url = this.parser.url('/users/@me', {
        });

        let request: HttpRequest = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as User;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new ErrorException(await response.json() as Error);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Returns a user object for a given user ID.
     *
     * @returns {Promise<User>}
     * @throws {ErrorException}
     * @throws {ClientException}
     */
    public async get(userId: string): Promise<User> {
        const url = this.parser.url('/users/:user_id', {
            'user_id': userId,
        });

        let request: HttpRequest = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as User;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new ErrorException(await response.json() as Error);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }



}
