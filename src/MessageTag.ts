/**
 * MessageTag automatically generated by SDKgen please do not edit this file manually
 * {@link https://sdkgen.app}
 */

import axios, {AxiosRequestConfig} from "axios";
import {TagAbstract} from "sdkgen-client"
import {ClientException, UnknownStatusCodeException} from "sdkgen-client";

import {ErrorException} from "./ErrorException";
import {Message} from "./Message";
import {User} from "./User";

export class MessageTag extends TagAbstract {
    /**
     * Retrieves the messages in a channel.
     *
     * @returns {Promise<Array<Message>>}
     * @throws {ErrorException}
     * @throws {ClientException}
     */
    public async getAll(channelId: string, around?: string, before?: string, after?: string, limit?: number): Promise<Array<Message>> {
        const url = this.parser.url('/channels/:channel_id/messages', {
            'channel_id': channelId,
        });

        let params: AxiosRequestConfig = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
                'around': around,
                'before': before,
                'after': after,
                'limit': limit,
            }, [
            ]),
        };

        try {
            const response = await this.httpClient.request<Array<Message>>(params);
            return response.data;
        } catch (error) {
            if (error instanceof ClientException) {
                throw error;
            } else if (axios.isAxiosError(error) && error.response) {
                const statusCode = error.response.status;

                if (statusCode === 400) {
                    throw new ErrorException(error.response.data);
                }

                if (statusCode === 404) {
                    throw new ErrorException(error.response.data);
                }

                if (statusCode === 500) {
                    throw new ErrorException(error.response.data);
                }

                throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
            } else {
                throw new ClientException('An unknown error occurred: ' + String(error));
            }
        }
    }

    /**
     * Retrieves a specific message in the channel. Returns a message object on success.
     *
     * @returns {Promise<Message>}
     * @throws {ErrorException}
     * @throws {ClientException}
     */
    public async get(channelId: string, messageId: string): Promise<Message> {
        const url = this.parser.url('/channels/:channel_id/messages/:message_id', {
            'channel_id': channelId,
            'message_id': messageId,
        });

        let params: AxiosRequestConfig = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
            }, [
            ]),
        };

        try {
            const response = await this.httpClient.request<Message>(params);
            return response.data;
        } catch (error) {
            if (error instanceof ClientException) {
                throw error;
            } else if (axios.isAxiosError(error) && error.response) {
                const statusCode = error.response.status;

                if (statusCode === 400) {
                    throw new ErrorException(error.response.data);
                }

                if (statusCode === 404) {
                    throw new ErrorException(error.response.data);
                }

                if (statusCode === 500) {
                    throw new ErrorException(error.response.data);
                }

                throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
            } else {
                throw new ClientException('An unknown error occurred: ' + String(error));
            }
        }
    }

    /**
     * Post a message to a guild text or DM channel. Returns a message object. Fires a Message Create Gateway event. See message formatting for more information on how to properly format messages.
     *
     * @returns {Promise<Message>}
     * @throws {ErrorException}
     * @throws {ClientException}
     */
    public async create(channelId: string, payload: Message): Promise<Message> {
        const url = this.parser.url('/channels/:channel_id/messages', {
            'channel_id': channelId,
        });

        let params: AxiosRequestConfig = {
            url: url,
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            params: this.parser.query({
            }, [
            ]),
            data: payload
        };

        try {
            const response = await this.httpClient.request<Message>(params);
            return response.data;
        } catch (error) {
            if (error instanceof ClientException) {
                throw error;
            } else if (axios.isAxiosError(error) && error.response) {
                const statusCode = error.response.status;

                if (statusCode === 400) {
                    throw new ErrorException(error.response.data);
                }

                if (statusCode === 404) {
                    throw new ErrorException(error.response.data);
                }

                if (statusCode === 500) {
                    throw new ErrorException(error.response.data);
                }

                throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
            } else {
                throw new ClientException('An unknown error occurred: ' + String(error));
            }
        }
    }

    /**
     * Edit a previously sent message. The fields content, embeds, and flags can be edited by the original message author. Other users can only edit flags and only if they have the MANAGE_MESSAGES permission in the corresponding channel. When specifying flags, ensure to include all previously set flags/bits in addition to ones that you are modifying. Only flags documented in the table below may be modified by users (unsupported flag changes are currently ignored without error).
     *
     * @returns {Promise<Message>}
     * @throws {ErrorException}
     * @throws {ClientException}
     */
    public async update(channelId: string, messageId: string, payload: Message): Promise<Message> {
        const url = this.parser.url('/channels/:channel_id/messages/:message_id', {
            'channel_id': channelId,
            'message_id': messageId,
        });

        let params: AxiosRequestConfig = {
            url: url,
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json',
            },
            params: this.parser.query({
            }, [
            ]),
            data: payload
        };

        try {
            const response = await this.httpClient.request<Message>(params);
            return response.data;
        } catch (error) {
            if (error instanceof ClientException) {
                throw error;
            } else if (axios.isAxiosError(error) && error.response) {
                const statusCode = error.response.status;

                if (statusCode === 400) {
                    throw new ErrorException(error.response.data);
                }

                if (statusCode === 404) {
                    throw new ErrorException(error.response.data);
                }

                if (statusCode === 500) {
                    throw new ErrorException(error.response.data);
                }

                throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
            } else {
                throw new ClientException('An unknown error occurred: ' + String(error));
            }
        }
    }

    /**
     * Delete a message. If operating on a guild channel and trying to delete a message that was not sent by the current user, this endpoint requires the MANAGE_MESSAGES permission.
     *
     * @returns {Promise<void>}
     * @throws {ErrorException}
     * @throws {ClientException}
     */
    public async remove(channelId: string, messageId: string): Promise<void> {
        const url = this.parser.url('/channels/:channel_id/messages/:message_id', {
            'channel_id': channelId,
            'message_id': messageId,
        });

        let params: AxiosRequestConfig = {
            url: url,
            method: 'DELETE',
            headers: {
            },
            params: this.parser.query({
            }, [
            ]),
        };

        try {
            const response = await this.httpClient.request(params);
        } catch (error) {
            if (error instanceof ClientException) {
                throw error;
            } else if (axios.isAxiosError(error) && error.response) {
                const statusCode = error.response.status;

                if (statusCode === 400) {
                    throw new ErrorException(error.response.data);
                }

                if (statusCode === 404) {
                    throw new ErrorException(error.response.data);
                }

                if (statusCode === 500) {
                    throw new ErrorException(error.response.data);
                }

                throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
            } else {
                throw new ClientException('An unknown error occurred: ' + String(error));
            }
        }
    }

    /**
     * Crosspost a message in an Announcement Channel to following channels. This endpoint requires the SEND_MESSAGES permission, if the current user sent the message, or additionally the MANAGE_MESSAGES permission, for all other messages, to be present for the current user.
     *
     * @returns {Promise<Message>}
     * @throws {ErrorException}
     * @throws {ClientException}
     */
    public async crosspost(channelId: string, messageId: string): Promise<Message> {
        const url = this.parser.url('/channels/:channel_id/messages/:message_id/crosspost', {
            'channel_id': channelId,
            'message_id': messageId,
        });

        let params: AxiosRequestConfig = {
            url: url,
            method: 'POST',
            headers: {
            },
            params: this.parser.query({
            }, [
            ]),
        };

        try {
            const response = await this.httpClient.request<Message>(params);
            return response.data;
        } catch (error) {
            if (error instanceof ClientException) {
                throw error;
            } else if (axios.isAxiosError(error) && error.response) {
                const statusCode = error.response.status;

                if (statusCode === 400) {
                    throw new ErrorException(error.response.data);
                }

                if (statusCode === 404) {
                    throw new ErrorException(error.response.data);
                }

                if (statusCode === 500) {
                    throw new ErrorException(error.response.data);
                }

                throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
            } else {
                throw new ClientException('An unknown error occurred: ' + String(error));
            }
        }
    }

    /**
     * @returns {Promise<Array<User>>}
     * @throws {ErrorException}
     * @throws {ClientException}
     */
    public async getReactionsByEmoji(channelId: string, messageId: string, emoji: string, type?: number, after?: string, limit?: number): Promise<Array<User>> {
        const url = this.parser.url('/channels/:channel_id/messages/:message_id/reactions/:emoji', {
            'channel_id': channelId,
            'message_id': messageId,
            'emoji': emoji,
        });

        let params: AxiosRequestConfig = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
                'type': type,
                'after': after,
                'limit': limit,
            }, [
            ]),
        };

        try {
            const response = await this.httpClient.request<Array<User>>(params);
            return response.data;
        } catch (error) {
            if (error instanceof ClientException) {
                throw error;
            } else if (axios.isAxiosError(error) && error.response) {
                const statusCode = error.response.status;

                if (statusCode === 400) {
                    throw new ErrorException(error.response.data);
                }

                if (statusCode === 404) {
                    throw new ErrorException(error.response.data);
                }

                if (statusCode === 500) {
                    throw new ErrorException(error.response.data);
                }

                throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
            } else {
                throw new ClientException('An unknown error occurred: ' + String(error));
            }
        }
    }

    /**
     * @returns {Promise<void>}
     * @throws {ErrorException}
     * @throws {ClientException}
     */
    public async deleteAllReactions(channelId: string, messageId: string): Promise<void> {
        const url = this.parser.url('/channels/:channel_id/messages/:message_id/reactions', {
            'channel_id': channelId,
            'message_id': messageId,
        });

        let params: AxiosRequestConfig = {
            url: url,
            method: 'DELETE',
            headers: {
            },
            params: this.parser.query({
            }, [
            ]),
        };

        try {
            const response = await this.httpClient.request(params);
        } catch (error) {
            if (error instanceof ClientException) {
                throw error;
            } else if (axios.isAxiosError(error) && error.response) {
                const statusCode = error.response.status;

                if (statusCode === 400) {
                    throw new ErrorException(error.response.data);
                }

                if (statusCode === 404) {
                    throw new ErrorException(error.response.data);
                }

                if (statusCode === 500) {
                    throw new ErrorException(error.response.data);
                }

                throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
            } else {
                throw new ClientException('An unknown error occurred: ' + String(error));
            }
        }
    }


}
