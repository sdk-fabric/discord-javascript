"""
ChannelMessageTag automatically generated by SDKgen please do not edit this file manually
https://sdkgen.app
"""

import requests
import sdkgen

from message import Message

class ChannelMessageTag(sdkgen.TagAbstract):
    def __init__(self, http_client: requests.Session, parser: sdkgen.Parser):
        super().__init__(http_client, parser)
    pass


    """
    Retrieves a specific message in the channel. Returns a message object on success.
    """
    def get(self, channel_id: str, message_id: str) -> Message:
        try:
            pathParams = {}
            pathParams["channel_id"] = channel_id
            pathParams["message_id"] = message_id

            queryParams = {}

            url = self.parser.url("/channels/:channel_id/messages/:message_id", pathParams)

            headers = {}

            response = self.http_client.get(url, headers=headers, params=queryParams)

            if response.status_code >= 200 and response.status_code < 300:
                return Message.from_json(response.content)


            raise sdkgen.UnknownStatusCodeException("The server returned an unknown status code")
        except Exception as e:
            raise sdkgen.ClientException("An unknown error occurred: " + str(e))
    pass

    """
    Post a message to a guild text or DM channel. Returns a message object. Fires a Message Create Gateway event. See message formatting for more information on how to properly format messages.
    """
    def create(self, channel_id: str) -> Message:
        try:
            pathParams = {}
            pathParams["channel_id"] = channel_id

            queryParams = {}

            url = self.parser.url("/channels/:channel_id/messages", pathParams)

            headers = {}

            response = self.http_client.post(url, headers=headers, params=queryParams)

            if response.status_code >= 200 and response.status_code < 300:
                return Message.from_json(response.content)


            raise sdkgen.UnknownStatusCodeException("The server returned an unknown status code")
        except Exception as e:
            raise sdkgen.ClientException("An unknown error occurred: " + str(e))
    pass

    """
    Delete a message. If operating on a guild channel and trying to delete a message that was not sent by the current user, this endpoint requires the MANAGE_MESSAGES permission.
    """
    def remove(self, channel_id: str, message_id: str):
        try:
            pathParams = {}
            pathParams["channel_id"] = channel_id
            pathParams["message_id"] = message_id

            queryParams = {}

            url = self.parser.url("/channels/:channel_id/messages/:message_id", pathParams)

            headers = {}

            response = self.http_client.delete(url, headers=headers, params=queryParams)

            if response.status_code >= 200 and response.status_code < 300:
                return


            raise sdkgen.UnknownStatusCodeException("The server returned an unknown status code")
        except Exception as e:
            raise sdkgen.ClientException("An unknown error occurred: " + str(e))
    pass

    """
    Crosspost a message in an Announcement Channel to following channels. This endpoint requires the SEND_MESSAGES permission, if the current user sent the message, or additionally the MANAGE_MESSAGES permission, for all other messages, to be present for the current user.
    """
    def crosspost(self, channel_id: str, message_id: str) -> Message:
        try:
            pathParams = {}
            pathParams["channel_id"] = channel_id
            pathParams["message_id"] = message_id

            queryParams = {}

            url = self.parser.url("/channels/:channel_id/messages/:message_id/crosspost", pathParams)

            headers = {}

            response = self.http_client.post(url, headers=headers, params=queryParams)

            if response.status_code >= 200 and response.status_code < 300:
                return Message.from_json(response.content)


            raise sdkgen.UnknownStatusCodeException("The server returned an unknown status code")
        except Exception as e:
            raise sdkgen.ClientException("An unknown error occurred: " + str(e))
    pass


